//
//  insert.swift
//  filldatabase
//
//  Created by Corentin Filoche on 25/07/2017.
//  Copyright © 2017 Corentin Filoche. All rights reserved.
//
import Foundation

// Allows to automatically write INSERT INTO query
// with two line
// @ 1) INSERT INTO table(column_name1,column_name2)
// @ 2) VALUES(value1, value2);
func insert(str: String, path: String, primary:Int) -> String
{
    // Define a dictionnary which will keep all data
    // Associtation is column_name -> value
    var value = Dictionary<String, String>()
    // @ 1)
    // Splited string inside an array for each row
    let rows = str.components(separatedBy: "\n")
    // Begin by writing the first row of the query 
    // and getting the table's name
    var query = "insert into \(rows[0].components(separatedBy: " ")[1])("
    // Don't know why, reading from file gives one blank row at the end
    // so needed to remove it, substract 1 more
    // We start at 1 because the index 0 gives you the name
    for cpt in 1...rows.count - 2
    {
        // Get items from the row which should be formatted as
        // column_name,data_type,more information...
        let rowItems = rows[cpt].components(separatedBy: ",")
        let columnName = rowItems[0]
        // We have to add a line break when we are at the last word
        // so adding a condition here
        if(cpt == rows.count - 2)
        {
            // Adding the line break
            query = query + "\(columnName))\n"
        }
        else
        {
            // Standard adding
            query = query + "\(columnName), "
        }
    }
    // Declare some variable to save name and forname if they exist
    var name = "NULL"
    var forname = "NULL"
    // @ 2)
    // Now we have the break line and we can begin the second line
    query = query + "values("
    // Same thing about -2 and starting at index 1
    // (pika comes from Pikachu, of course)
    for pika in 1...rows.count - 2
    {
        // We declare the value (which will be writed in the query)
        // with NULL by default, could be useful :p
        var value = "NULL"
        // Getting items for each row, same thing ...
        let rowItems = rows[pika].components(separatedBy: ",")
        // Seeing if the provided value in the data file begins with an @
        // that means value are taken from a list of value in a file
        // (substring function is redeclared in function.swift)
        if rowItems[1].substring(to: 1) == "@"
        {
            // In this way, we are getting a random value from the file
            // corresponding to my @data_type
            // The function is defined in function.swift
            value = getDataFromFile(pathfile: path, typeofdata: rowItems[1])
            // Saving name or/and forname is they exist 
            // -> for email address
            if rowItems[1] == "@name"
            {
                name = value
            }
            else if rowItems[1] == "@forname"
            {
                forname = value
            }
            // We're adding the number with the street
            else if rowItems[1] == "@rue"
            {
                // Removing the first quote
                value = value.substring(from: 1)
                // Create the random number
                // the number has 70% chance to be lower than 100
                let chance = arc4random_uniform(100)
                let random : Int
                if chance < 70
                {
                    random = Int(arc4random_uniform(100))
                }
                else
                {
                    random = Int(arc4random_uniform(300))
                }
                value = "'\(random), \(value)"
            }
            // 
            else if rowItems[1] == "@city"
            {
                value = value.substring(with: 1,max: value.length - 1).replacingOccurrences(of: "'", with: "''")
                value = "'\(value)'"
            }
        }
        // Conditional generate
        //
        else if rowItems[1].substring(to: 1) == "?"
        {
            let tab = query.components(separatedBy: ",")
            print(tab[tab.count-2])
        }
        // Random génération of the value
        else
        {
            // We get out theses variables to prevent from writing them twice
            let date = Date()
            let calendar = Calendar.current
            let month  = arc4random_uniform(12 - 1) + 1
            let day = arc4random_uniform(31 - 1) + 1
            // Getting an id which is an integer between a min value and a max value
            if rowItems[1] == "integer"
            {
                value = String(Int(arc4random_uniform(UInt32(Int(rowItems[3])! - Int(rowItems[2])!))) + Int(rowItems[2])!)
            }
            // Getting a phone number based on 10 numbers and begin with zero
            else if rowItems[1] == "phone"
            {
                value = "'O1O2O3O4O5'"
            }
            // Generate e-mail adresse
            else if rowItems[1] == "email"
            {
                if name != "NULL" && forname != "NULL"
                {
                    // Removing quote from name and forname
                    name = name.substring(with: 1, max: name.length - 1)
                    forname = forname.substring(with: 1, max: forname.length - 1)
                    // Remove special characters
                    name = name.folding(options: .diacriticInsensitive, locale: nil)
                    forname = forname.folding(options: .diacriticInsensitive, locale: nil)
                    // Store the created email
                    value = "\(forname.lowercased()).\(name.lowercased())@debian.org"
                }
                else
                {
                    value = "\(randomString(length: 10))@debian.org'"
                }
            }
            // Generate a ramdom date using Oracle's function TO_DAT
            // If the date is a birth date so the interval will be between 1950 and today
            else if rowItems[1] == "dateBirthday"
            {
                let year = arc4random_uniform(UInt32(calendar.component(.year, from: date) - 1950)) + 1950
                value = "TO_DATE('\(year)/\(month)/\(day)', 'yyyy/mm/dd')"
            }
            // Else the minimum date will start in 1995
            else if rowItems[1] == "date"
            {
                let year = arc4random_uniform(UInt32(calendar.component(.year, from: date) - 1995)) + 1995
                value = "TO_DATE('\(year)/\(month)/\(day)', 'yyyy/mm/dd')"
            }
            // Generate the postal code
            else if rowItems[1] == "postalCode"
            {
                let cp = arc4random_uniform(99999)
                value = String(cp)
                while value.length != 5
                {
                    value = "0\(value)"
                }
            }
            else if rowItems[1] == "%PK%"
            {
                value = String(primary)
            }
        }
        // Here we are adding the line break, right parentheses
        // and the semi-colon (SQL loves it ! <3)
        if pika == rows.count - 2
        {
            query = query + "\(value));\n"
        }
        else
        {
            query = query + value + ", "
        }
    }
    // We return the query to write it in the file
    return query
}
